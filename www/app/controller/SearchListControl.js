/*
 * File: app/controller/SearchListControl.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.1.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.SearchListControl', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            SearchList: {
                autoCreate: true,
                selector: '#SearchList',
                xtype: 'list'
            },
            detailMap: {
                selector: '#detailMap',
                xtype: 'Ext.Map'
            },
            locatemebtn: {
                selector: '#locatemebtn',
                xtype: 'Ext.Button'
            },
            refreshbtn: {
                selector: '#refreshbtn',
                xtype: 'Ext.Button'
            }
        },

        control: {
            "SearchList": {
                initialize: 'onListInitialize',
                select: 'onListSelect'
            },
            "locatemebtn": {
                tap: 'onLocateButtonTap'
            },
            "map": {
                maprender: 'onMapMaprender'
            },
            "refreshbtn": {
                tap: 'onRefreshButtonTap'
            }
        }
    },

    onListInitialize: function(component, eOpts) {
        console.log('list init!!');
        this.RefreshList();
    },

    onLocateButtonTap: function(button, e, eOpts) {
        //alert('map init');
        //var detailmap = this.getdetailMap();

        var detailmap = button.up('tabpanel').down('map[id=detailMap]');
        console.log('render');
        //var detailmap = map;

        detailmap.setMapOptions({
            zoom: 11
        });

        var longitude;
        var latitude;

        if(Ext.os.is.iOS || Ext.os.is.Android)
        {
            if (Ext.device)
            {
                Ext.device.Geolocation.getCurrentPosition({
                    scope: this,
                    success: function(position) {
                        this.setMasked(false);
                        //this.map.setMapCenter(position.coords);
                        latitude = position.coords.latitude;
                        longitude = position.coords.longitude;                         
                    },
                    failure: function() {
                        this.setMasked(false);
                        Ext.device.Notification.show({
                            title: 'Geolocation',
                            message: 'Cannot identify your location.'
                        });
                    }
                });
            }
        }
        //else if (Ext.os.is.Windows || Ext.os.is.Windows.MacOS)
        else if (navigator.geolocation)
        {
            console.log('os win!!');

            var options = {
                timeout: 10000,
                maximumAge: 20000,
                enableHighAccuracy: true
            };


            /* navigator.geolocation.getCurrentPosition(function(pos){
            latitude = pos.coords.latitude;
            longitude = pos.coords.longitude;  
            console.log(latitude); //this works
            console.log(longitude); //this works
            }, function(){
            console.log('failed');
            latitude = '0';
            longitude = '0';
            }, options);*/

            longitude = '35.187128';
            latitude = '31.788777';
        }
        else
        {
            longitude = '0';
            latitude = '0'; 
        }

        detailmap.setMapCenter({
            latitude: latitude,
            longitude: longitude
        });


        //Tracking Marker Image
        image = new google.maps.MarkerImage(
        'resources/images/point.png',
        new google.maps.Size(32, 31),
        new google.maps.Point(0, 0),
        new google.maps.Point(16, 31)
        );


        var store = Ext.data.StoreManager.lookup('BusinessStore');

        store.load(function() {
            store.each(function(record){
                //console.log(record.get('Latitude'));

                var position = new google.maps.LatLng(record.get('Latitude'), record.get('Longitude'));  //Sencha HQ
                var marker = new google.maps.Marker({
                    position: position,
                    title : record.get('BusinessName'),
                    map: detailmap.getMap(),
                    icon: image
                });

                infowindow = new google.maps.InfoWindow({
                    content: record.get('BusinessName')
                });

                google.maps.event.addListener(marker, 'click', function() {
                    infowindow.open(detailmap.getMap(), marker);
                });


            });
        });

    },

    onMapMaprender: function(map, gmap, eOpts) {
        /*//alert('map init');
        //var detailmap = this.getdetailMap();

        console.log('render');

        var detailmap = map.up('tabpanel').down('map[id=detailMap]');

        //var detailmap = map;

        detailmap.setMapOptions({
            zoom: 18
        });

        var lon = '35.187128';
        var lat = '31.788777';

        detailmap.setMapCenter({
            latitude: lat,
            longitude: lon
        });


        //Tracking Marker Image
        image = new google.maps.MarkerImage(
        'resources/images/point.png',
        new google.maps.Size(32, 31),
        new google.maps.Point(0, 0),
        new google.maps.Point(16, 31)
        );

        var position = new google.maps.LatLng(lat, lon);  //Sencha HQ
        var marker = new google.maps.Marker({
            position: position,
            title : 'המיקום שלי',
            map: detailmap.getMap(),
            icon: image
        });

        infowindow = new google.maps.InfoWindow({
            content: 'המיקום שלי'
        });

        google.maps.event.addListener(marker, 'click', function() {
            infowindow.open(detailmap.getMap(), marker);
        });



        //To place the marker

        var marker = new google.maps.Marker({
            position: center,
            map: detailsmap.map
        });*/

    },

    onListSelect: function(dataview, record, eOpts) {


        //save the selected businessID
        var values = {"SelectedBusinessID": record.get('id'), "distance": record.get('distance')}; 
        var newRecord = new MyApp.model.LocalData(values);
        Ext.getStore('LocalStore').add(newRecord);
        //save the data to the Web local Storage
        Ext.getStore('LocalStore').sync();

        /*var LocalStore = Ext.getStore('LocalStore'); // Shortcut
        var aRecord = LocalStore.getAt(0); 
        console.log('count of store is: '+LocalStore.getCount());
        console.log('Selected business ID is: ' + aRecord.get('SelectedBusinessID'));
        */

        var Screen;
        Screen = Ext.create('MyApp.view.BusinessScreen', {
            id: 'BusinessScreen'
        });

        var title = Screen.down('titlebar[id=BusinessScreenTitle]');

        //set the title of the business
        title.setTitle(record.get('BusinessName'));

        Ext.Viewport.setActiveItem(Screen);
    },

    onRefreshButtonTap: function(button, e, eOpts) {

        console.log('refresh button tap1!!');
        this.RefreshList();
    },

    launch: function() {
        console.log('search screen launch');
        // Initialize Google Map Services
        this.directionsDisplay = new google.maps.DirectionsRenderer();
        this.directionsService = new google.maps.DirectionsService();

        var mapRendererOptions = {
            //draggable: true,  //Allows to drag route
            //hideRouteList: true,
            suppressMarkers: true
        };

        this.directionsDisplay.setOptions(mapRendererOptions);

        //var localStore = Ext.getStore('LocalStore');

        /*var localStore = Ext.StoreManager.get('LocalStore');

        localStore.add({Longitude: "-2", Latitude: "-1"});

        console.log(localStore);*/

        //check if the screen was loaded already before

        //load stores:

    },

    RefreshList: function() {
        //var MyNearByStore = Ext.getStore('MyApp.store.NearByStore');
        console.log('list refresh!!');
        var longitude;
        var latitude;

        if(Ext.os.is.iOS || Ext.os.is.Android)
        {
            if (Ext.device)
            {
                Ext.device.Geolocation.getCurrentPosition({
                    scope: this,
                    success: function(position) {
                        this.setMasked(false);
                        //this.map.setMapCenter(position.coords);                
                        latitude = position.coords.latitude;
                        longitude = position.coords.longitude;   
                        console.log("Geolocation: succeed to identify the location: lat:"+latitude+" ,lon"+longitude);
                    },
                    failure: function() {
                        this.setMasked(false);
                        console.log("Geolocation: Cannot identify your location");
                        //define default.
                        longitude = '35.187128';
                        latitude = '31.788777';
                        Ext.device.Notification.show({
                            title: 'Geolocation',
                            message: 'Cannot identify your location.'
                        });
                    }
                });
            }
        }
        /*else if (Ext.os.is.Windows || Ext.os.is.Windows.MacOS)
        {
        console.log('os win!!');
        longitude = '35.187128';
        latitude = '31.788777';
        }*/
        else if (navigator.geolocation)
        {
            console.log('os win!!');

            var options = {
                timeout: 10000,
                maximumAge: 20000,
                enableHighAccuracy: true
            };


            /* navigator.geolocation.getCurrentPosition(function(pos){
            latitude = pos.coords.latitude;
            longitude = pos.coords.longitude;  
            console.log(latitude); //this works
            console.log(longitude); //this works
            }, function(){
            console.log('failed');
            latitude = '0';
            longitude = '0';
            }, options);*/

            longitude = '35.187128';
            latitude = '31.788777';
        }
        else
        {
            longitude = '35.187128';
            latitude = '31.788777'; 
        }


        //var list = Ext.getCmp('#NearByList');
        var list = this.getSearchList();
        var sorter = 'distance';
        //var list = Ext.getCmp('#SearchList');
        var url = 'http://'+localStorage.serverpath+'/Server-side/GetBusinessesByParams.php?longitude='+longitude+'&latitude='+latitude+'&filtered=1&sortingBy=distance&location=-1&cat=3&text=Haoman&lastrow=-1';
        console.log(url);
        list.getStore().getProxy().setUrl(url);
        list.getStore().load({callback: function(records, operation, success) {
            list.setMasked(false);
            console.log('MASK IS REMOVED!!');
            var count = list.getStore().getCount();
            var data = list.getStore().getRange();
            console.log('count : ' + count);
            console.log('data : ' + data);
            list.getStore().sort(sorter,'DESC');
            list.refresh();
            //list.show();
        }
    });
    }

});