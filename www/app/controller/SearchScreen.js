/*
 * File: app/controller/SearchScreen.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.1.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.SearchScreen', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            CatSelectField: {
                selector: '#CatSelectField',
                xtype: 'Ext.picker.Picker'
            },
            SearchScreen: {
                selector: '#SearchScreen',
                xtype: 'Ext.Panel'
            },
            CitySelectField: {
                selector: '#CitySelectField',
                xtype: 'Ext.picker.Picker'
            },
            SearchSortList: {
                selector: '#SearchSortList',
                xtype: 'Ext.dataview.List'
            },
            BusinessDataView: {
                selector: '#BusinessDataView',
                xtype: 'Ext.dataview.DataView'
            },
            searchscrnRefBtn: {
                selector: '#searchscrnRefBtn',
                xtype: 'Ext.Button'
            },
            SearchField: {
                selector: '#SearchField',
                xtype: 'Ext.field.Search'
            },
            detailmap: {
                selector: '#detailmap',
                xtype: 'Ext.Map'
            },
            BusinessDataItem: {
                selector: '#BusinessDataItem',
                xtype: 'Ext.dataview.component.DataItem'
            },
            hidebtn: {
                selector: '#hidebtn',
                xtype: 'Ext.Button'
            },
            GoBtn: {
                selector: '#GoBtn',
                xtype: 'Ext.Button'
            },
            LoadMoreBtn: {
                selector: '#LoadMoreBtn',
                xtype: 'Ext.Button'
            }
        },

        control: {
            "SearchScreen": {
                initialize: 'onSearchScreenPanelInitialize',
                activate: 'onSearchScreenActive'
            },
            "searchscrnRefBtn": {
                tap: 'onsearchscrnRefBtnTap'
            },
            "SearchSortList": {
                select: 'onSearchSortListSelect'
            },
            "hidebtn": {
                tap: 'onhidebtnTap'
            },
            "CitySelectField": {
                change: 'onCitySelectFieldChange'
            },
            "CatSelectField": {
                change: 'onCatSelectFieldChange'
            },
            "GoBtn": {
                tap: 'onGoBtnTap'
            },
            "LoadMoreBtn": {
                tap: 'onLoadMoreBtnTap'
            },
            "BusinessDataView": {
                itemtap: 'onDataviewItemTap'
            },
            "SearchField": {
                keyup: 'onSearchfieldKeyup'
            }
        }
    },

    onSearchScreenPanelInitialize: function(component, eOpts) {

        console.log('onSearchScreenPanelInitialize');
        //load the category select field
        var CatSelect = this.getCatSelectField();
        var CitySelect = this.getCitySelectField();
        var url = 'http://'+localStorage.serverpath+'/Server-side/GetBusinessTypes.php';
        console.log(url);
        CatSelect.getStore().getProxy().setUrl(url);
        CatSelect.getStore().load({callback: function(records, operation, success) {
            console.log("Total categories loaded:"+CatSelect.getStore().getCount());

            //load the category select field
            var url = 'http://'+localStorage.serverpath+'/Server-side/GetLocations.php';
            console.log(url);
            CitySelect.getStore().getProxy().setUrl(url);
            CitySelect.getStore().load({callback: function(records, operation, success) {
                console.log("cities loaded"+CitySelect.getStore().getCount());


                var SortList = Ext.ComponentQuery.query("#SearchSortList")[0];
                //load the sorting list
                var url = 'http://'+localStorage.serverpath+'/Server-side/SearchSort.php';
                console.log(url);
                SortList.getStore().getProxy().setUrl(url);
                SortList.getStore().load({callback: function(records, operation, success) {
                    console.log("Total Sorts loaded:"+SortList.getStore().getCount());
                    SortList.refresh();

                    /*var controller = MyApp.app.getController( 'MyApp.controller.SearchScreen');
                    controller.ReloadBusinessDataFromServer(function(){

                    //check if the screen was loaded already before
                    var Screen = Ext.ComponentQuery.query('#MyLocScreen');

                    if(Screen.length===0)//no
                    {
                        Screen = Ext.create('MyApp.view.MyLocScreen', {
                            id: 'MyLocScreen'
                        });

                        Screen.Show();
                    }
                    else
                    {
                        Screen[0].Show();
                    }
                });*/
            }
        });
    }
            });
}
});
    },

    onsearchscrnRefBtnTap: function(button, e, eOpts) {
        console.log('onsearchscrnRefBtnTap');
        var controller = MyApp.app.getController( 'MyApp.controller.SearchScreen');
        controller.ReloadBusinessDataFromServer(Ext.getStore('BusinessStore').getCount(),function(){
        });
    },

    onSearchSortListSelect: function(dataview, record, eOpts) {
        console.log("onSearchSortListSelect");
        var BusinessStore = Ext.getStore('BusinessStore');

        var sorter = record.get('SorterName');
        if(sorter==='distance')
        BusinessStore.sort(sorter,'ASC');
        else
        BusinessStore.sort(sorter,'DESC');

        //TODO: refresh the dataview
    },

    onhidebtnTap: function(button, e, eOpts) {
        console.log('hidebutton tap');
        var filterPannel =  button.up('container[id=FilterPannel]');
        var BottomfilterPannel =  button.up('container[id=FilterPannel]').down('container[id=bottomFilterPannel]');

        var SeatchFieldCont = button.up('container[id=FilterPannel]').down('container[id=SeatchFieldCont]');
        var FilterTabBar = button.up('container[id=FilterPannel]').down('tabbar[id=FilterTabBar]');

        if(BottomfilterPannel.isHidden())
        {
            BottomfilterPannel.show();
            //filterPannel.setFlex(5.5);
            filterPannel.setHeight('50%');
            filterPannel.removeCls('ListMapTopContCollapse');
            filterPannel.addCls('ListMapTopCont');
            //SeatchFieldCont.setFlex(2);
            //BottomfilterPannel.setFlex(8);
            //FilterTabBar.setHeight('15%');
            //SeatchFieldCont.setHeight(null);
            //SeatchFieldCont.setFlex(2);
            //FilterTabBar.setHeight('10%');
        }
        else
        {
            BottomfilterPannel.hide();
            //filterPannel.setFlex(1.5);
            filterPannel.removeCls('ListMapTopCont');
            filterPannel.addCls('ListMapTopContCollapse');
            //SeatchFieldCont.setFlex(2);
            //BottomfilterPannel.setFlex(0);
            //FilterTabBar.setHeight('40%');
            //SeatchFieldCont.setHeight('20%');
            //FilterTabBar.setHeight('20%');
            filterPannel.setHeight('25%');
        }
    },

    onCitySelectFieldChange: function(selectfield, newValue, oldValue, eOpts) {
        console.log('onCitySelectFieldChange_');

        var field = selectfield;

        if (!field.initialized) {
            return;
        }

        if(field.getRecord().get('locationid')==="0")//no select
        {
            selectfield.setBaseCls('CityLabel-class');
            //selectfield.setPlaceHolder("");
        }
        else
        {
            selectfield.setBaseCls('CityCatLabel-class');
        }

        var controller = MyApp.app.getController( 'MyApp.controller.SearchScreen');
        controller.ReloadBusinessDataFromServer(Ext.getStore('BusinessStore').getCount(),function(){
        });
    },

    onCatSelectFieldChange: function(selectfield, newValue, oldValue, eOpts) {
        console.log('onCatSelectFieldChange');

        var field = selectfield;

        if (!field.initialized) {
            return;
        }

        if(field.getRecord().get('id')==="0")//no select
        {
            selectfield.setBaseCls('CatLabel-class');
        }
        else
        {
            selectfield.setBaseCls('CityCatLabel-class');
        }

        var controller = MyApp.app.getController( 'MyApp.controller.SearchScreen');
        controller.ReloadBusinessDataFromServer(Ext.getStore('BusinessStore').getCount(),function(){
        });
    },

    onGoBtnTap: function(button, e, eOpts) {
        console.log('GoBtn');

        //check if the screen was loaded already before
        var Screen = Ext.ComponentQuery.query('#BusinessScreen');

        if(Screen.length===0)//no
        {
            Screen = Ext.create('MyApp.view.BusinessScreen', {
                id: 'BusinessScreen'
            });

            //TODO: save the selected business ID

            Ext.Viewport.setActiveItem(Screen);
        }
        else
        {
            Ext.Viewport.setActiveItem(Screen[0]);
            //TODO: save the selected business ID
        }
    },

    onSearchScreenActive: function(container, newActiveItem, oldActiveItem, eOpts) {
        console.log('onSearchScreenActive');

        var longitude;
        var latitude;


        if(container.bshowMyLocScreen===true)
        {
            /* var NBcontroller = MyApp.app.getController( 'MyApp.controller.NearByListControl');
            var list =  Ext.ComponentQuery.query('NearByList')[0];
            NBcontroller.FindCurrentLocation(function(longitude,latitude){

            console.log('Found position in Where Are You screen: Lat<'+latitude+'>, Lon<'+longitude+'>');*/
            //var list = Ext.getCmp('#NearByList');
            //var list = NBcontroller.getNearByList();


            /*var UserStore = Ext.getStore('UserStore');
            var aRecord = UserStore.getAt(0);
            var user_id = aRecord.get('user_id');*/
            //var BusinessStore= Ext.create('MyApp.store.BusinessStore');
            //list.setStore(BusinessStore);
            //var list2 = Ext.getCmp('NearByList');
            /*var BusinessStore = Ext.getStore('BusinessStoreNearByScreen');
            var url = 'http://'+localStorage.serverpath+'/Server-side/GetBusinessesByParams.php?longitude='+longitude+'&latitude='+latitude+'&filtered=0&sortingBy=distance&user_id='+localStorage.user_id;
            console.log(url);
            BusinessStore.getProxy().setUrl(url);
            BusinessStore.load({callback: function(records, operation, success) {
            console.log('MASK IS REMOVED!!');
            var count = BusinessStore.getCount();
            //var data = list.getStore().getRange();
            console.log('BusinessStoreNearByScreen count : ' + count);
            //list.show();

            //pop the screen anyway, even if the only option is i am home.
            if(count >0)
            {*/
                container.bshowMyLocScreen=false;
                var Screen = Ext.ComponentQuery.query('#MyLocScreen');

                if(Screen.length===0)//no
                {
                    Screen = Ext.create('MyApp.view.MyLocScreen', {
                        id: 'MyLocScreen'
                    });

                    //Screen.Show();
                }
                else
                {
                    Screen[0].Show();
                }
                /* }
                }
                });
                });*/
            }



            var controller = MyApp.app.getController( 'MyApp.controller.SearchScreen');
            controller.ReloadBusinessDataFromServer(Ext.getStore('BusinessStore').getCount(),function(){
                //check if the screen was loaded already before


            });
    },

    onLoadMoreBtnTap: function(button, e, eOpts) {
        console.log('onLoadMoreBtnTap');

        var rowsLimit=0;

        var BusinessStore = Ext.getStore('BusinessStore');

        if(BusinessStore.getCount()>0)
        {
            rowsLimit=  BusinessStore.getCount()+5;//every time increas by 5
        }


        var controller = MyApp.app.getController( 'MyApp.controller.SearchScreen');
        controller.ReloadBusinessDataFromServer(rowsLimit,function(){
        });
    },

    onDataviewItemTap: function(dataview, index, target, record, e, eOpts) {
        console.log('onDataviewItemTap');
        var goBtn;

        //clean last selected item
        if(LastSelectedDataItem)
        {
            LastSelectedDataItem.setItemCls('Dataitem'); 
            goBtn = LastSelectedDataItem.down('button');
            goBtn.setBaseCls('GoBusinessButton');
        }

        LastSelectedDataItem = target;

        target.setItemCls('Dataitem-selection');

        //TODO: change the button icon pic
        goBtn = target.down('button');
        goBtn.setBaseCls('GoBusinessButtonSelected');

        //put the red circelled marker on the same coords of the record.

        if(google)
        {
            if(SelectedMarkerCircle)
            {
                SelectedMarkerCircle.setMap(null);
                SelectedMarkerCircle=null;
            }
            var map = Ext.ComponentQuery.query('#detailmap')[0];
            image = new google.maps.MarkerImage(
            'resources/images/marker3.png',
            new google.maps.Size(42, 42),
            new google.maps.Point(0, 0),
            new google.maps.Point(28, 34)
            );

            //draw the circel around the Pin
            var position = new google.maps.LatLng(target.getRecord(0).get('latitude'), target.getRecord(0).get('longitude'));  //Sencha HQ

            //check account_level
            var marker = new google.maps.Marker({
                position: position,
                title : target.getRecord(0).get('business_name'),
                map: map.getMap(),
                icon: image
            });
            //save the marker
            SelectedMarkerCircle=marker;
        }

    },

    onSearchfieldKeyup: function(textfield, e, eOpts) {
        console.log('onSearchfieldKeyup');

        var BusinessStore = Ext.getStore('BusinessStore');

        BusinessStore.clearFilter();

        //filter the store by the user entry on business name field
        BusinessStore.filter(Ext.create('Ext.util.Filter', {
            filterFn: function(item) {
                var business_name="";
                if(item.get('business_name'))
                business_name = item.get('business_name');
                var full_address="";
                if(item.get('full_address'))
                full_address=item.get('full_address');
                return business_name.search(textfield.getValue())!==-1 || full_address.search(textfield.getValue())!==-1;  
            }
        }));

    },

    ReloadBusinessDataFromServer: function(rowsLimit, callback) {
        //var MyNearByStore = Ext.getStore('MyApp.store.NearByStore');
        console.log('ReloadBusinessDataFromServer1');
        var longitude;
        var latitude;

        var dataView = Ext.ComponentQuery.query('businessdataview')[0];

        if(dataView.getStore().getAllCount()>0)
        {

            //dataView.getStore().removeAll();

            //dataView.getStore().sync();

            //dataView.removeAll(false,true);
        }

        var NearByController = MyApp.app.getController( 'MyApp.controller.NearByListControl');
        NearByController.FindCurrentLocation(function(longitude,latitude){

            //read the screen filter params:
            var CityID=0;
            if(Ext.ComponentQuery.query('#CitySelectField')[0].getRecord())
            CityID = Ext.ComponentQuery.query('#CitySelectField')[0].getRecord().get('locationid');

            var CatID =0;
            if(Ext.ComponentQuery.query('#CatSelectField')[0].getRecord())
            CatID = Ext.ComponentQuery.query('#CatSelectField')[0].getRecord().get('id');


            var freeTxt = Ext.ComponentQuery.query('#SearchField')[0].getValue();
            if(freeTxt==="")
            freeTxt="NOTEXTFILTER";


            //load main business data
            /*var UserStore = Ext.getStore('UserStore');
            var aRecord = UserStore.getAt(0);
            var user_id = aRecord.get('user_id');*/


            //define the minimum of rows to retrieve.
            if(rowsLimit<5 || rowsLimit===null )
            {
                rowsLimit=5;
            }
            var BusinessStore = Ext.getStore('BusinessStore');
            BusinessStore.removeAll(true);
            var sorter = 'distance';
            var url = 'http://'+localStorage.serverpath+'/Server-side/GetBusinessesByParams.php?longitude='+longitude+'&latitude='+latitude+'&filtered=1&sortingBy=distance&location='+CityID+'&cat='+CatID+'&text='+freeTxt+'&lastrow=-1&user_id='+localStorage.user_id+'&rowsLimit='+rowsLimit;
            //var url = 'http://'+localStorage.serverpath+'/Server-side/GetBusinessesByParams.php?longitude='+longitude+'&latitude='+latitude+'&filtered=1&sortingBy=distance&location='+CityID+'&cat=0&text='+freeTxt+'&lastrow=-1';
            console.log(url);
            console.log('rowsLimit='+rowsLimit);
            var proxy= BusinessStore.getProxy();
            proxy.setUrl(url);
            //proxy.setExtraParam('id', BusinessID );
            //proxy.setExtraParam('filtered', "2" );//business screen filter
            //proxy.setExtraParam('sortingBy', "id" );

            BusinessStore.load({callback: function(records, operation, success) {  
                var count = BusinessStore.getCount();
                var data = BusinessStore.getRange();
                console.log('BusinessStore count : ' + count);


                /*var i=count;
                while(i<dataView.)
                dataView.removeAt();*/

                //console.log('BusinessStore data : ' + data);

                //BusinessStore.sort(sorter,'DESC');

                //TODO: if no data found, clear the dataview
                /*if(count===0)
                {
                //dataView.removeAll(false,false);
            }
            else
            {*/
                //dataView.getStore().setData(records);

                //Draw the pins on the map
                var controller = MyApp.app.getController( 'MyApp.controller.SearchScreen');
                controller.DrawPinsOnMap(latitude, longitude,function(){
                    console.log("pins drawed on map");

                    callback();
                });
                //}
            }    
        });    
    });  



    },

    DrawPinsOnMap: function(lat, lon, callback) {

        console.log('DrawPinsOnMap');

        //remove all current markers from the map.
        if (markersArray) {
            for (var i=0; i<markersArray.length; i++) {
                markersArray[i].setMap(null);
            }

            markersArray.length = 0;
        }

        //build the map center
        var myOptions = {
            zoom: 16,
            center: new google.maps.LatLng(lat, lon),
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };

        var map = Ext.ComponentQuery.query('#detailmap')[0];

        //set some map options
        map.setMapOptions({
            zoom: 16
        });

        map.setMapCenter({
            latitude: lat,
            longitude: lon
        });


        var store = Ext.getStore('BusinessStore');


        image = new google.maps.MarkerImage(
        'resources/images/marker1.png',
        new google.maps.Size(32, 31),
        new google.maps.Point(0, 0),
        new google.maps.Point(16, 31)
        );

        PremiumImage = new google.maps.MarkerImage(
        'resources/images/marker2.png',
        new google.maps.Size(32, 31),
        new google.maps.Point(0, 0),
        new google.maps.Point(16, 31)
        );

        store.each(function(record){

            //draw Business Pins
            var position = new google.maps.LatLng(record.get('latitude'), record.get('longitude'));  //Sencha HQ

            //check account_level
            if(record.get('account_level')===1)
            {
                var marker = new google.maps.Marker({
                    position: position,
                    title : record.get('business_name'),
                    map: map.getMap(),
                    icon: PremiumImage
                });
            }
            else
            {
                var marker = new google.maps.Marker({
                    position: position,
                    title : record.get('business_name'),
                    map: map.getMap(),
                    icon: image
                });
            }
            //saves the market to the array
            markersArray.push(marker);
        });

        callback();
    }

});